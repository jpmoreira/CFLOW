/* Generated By:JJTree&JavaCC: Do not edit this line. EG2.java */
package REGEX;

public class EG2/*@bgen(jjtree)*/implements EG2TreeConstants, EG2Constants {/*@bgen(jjtree)*/
  protected static JJTEG2State jjtree = new JJTEG2State();public static void main(String args [])
  {

    try
    {
      EG2 obj=new EG2(System.in);
        SimpleNode s=obj.Regex();
        s.dump("");
    }
    catch(ParseException e)
    {
    }

  }

  static final public SimpleNode Regex() throws ParseException {
 /*@bgen(jjtree) Regex */
  ASTRegex jjtn000 = new ASTRegex(JJTREGEX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Expression();
      jj_consume_token(LF);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void ID_Node() throws ParseException {
                /*@bgen(jjtree) ID_Node */
                ASTID_Node jjtn000 = new ASTID_Node(JJTID_NODE);
                boolean jjtc000 = true;
                jjtree.openNodeScope(jjtn000);Token t;
    try {
      token = jj_consume_token(ID);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.identifier=token.image.replace("\u005c"","");
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void Expression() throws ParseException {
                        int nrChilds=1;
    Group();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 16:
               ASTOR jjtn001 = new ASTOR(JJTOR);
               boolean jjtc001 = true;
               jjtree.openNodeScope(jjtn001);
      try {
        label_1:
        while (true) {
          jj_consume_token(16);
          Group();
                         nrChilds++;
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 16:
            ;
            break;
          default:
            jj_la1[0] = jj_gen;
            break label_1;
          }
        }
      } catch (Throwable jjte001) {
               if (jjtc001) {
                 jjtree.clearNodeScope(jjtn001);
                 jjtc001 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte001 instanceof RuntimeException) {
                 {if (true) throw (RuntimeException)jjte001;}
               }
               if (jjte001 instanceof ParseException) {
                 {if (true) throw (ParseException)jjte001;}
               }
               {if (true) throw (Error)jjte001;}
      } finally {
               if (jjtc001) {
                 jjtree.closeNodeScope(jjtn001,  nrChilds);
               }
      }
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
  }

  static final public void Group() throws ParseException {
                   int nrChilds=1;
    Terminal();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
    case LP:
    case DOT:
                     ASTCONCAT jjtn001 = new ASTCONCAT(JJTCONCAT);
                     boolean jjtc001 = true;
                     jjtree.openNodeScope(jjtn001);
      try {
        label_2:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case DOT:
            jj_consume_token(DOT);
            break;
          default:
            jj_la1[2] = jj_gen;
            ;
          }
          Terminal();
                                       nrChilds++;
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ID:
          case LP:
          case DOT:
            ;
            break;
          default:
            jj_la1[3] = jj_gen;
            break label_2;
          }
        }
      } catch (Throwable jjte001) {
                     if (jjtc001) {
                       jjtree.clearNodeScope(jjtn001);
                       jjtc001 = false;
                     } else {
                       jjtree.popNode();
                     }
                     if (jjte001 instanceof RuntimeException) {
                       {if (true) throw (RuntimeException)jjte001;}
                     }
                     if (jjte001 instanceof ParseException) {
                       {if (true) throw (ParseException)jjte001;}
                     }
                     {if (true) throw (Error)jjte001;}
      } finally {
                     if (jjtc001) {
                       jjtree.closeNodeScope(jjtn001,  nrChilds);
                     }
      }
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
  }

  static final public void Terminal() throws ParseException {
                 /*@bgen(jjtree) Terminal */
                 ASTTerminal jjtn000 = new ASTTerminal(JJTTERMINAL);
                 boolean jjtc000 = true;
                 jjtree.openNodeScope(jjtn000);Token t;String s;String id;Token idToken;
    try {
   jjtn000.upperBound=1;jjtn000.lowerBound=1;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        idToken = jj_consume_token(ID);
    jjtn000.isTrueTerminal=true;id=idToken.image;id=id.replace("\u005c"","");jjtn000.idString=id;
        break;
      case LP:
        jj_consume_token(LP);
        Expression();
        jj_consume_token(RP);
    jjtn000.isTrueTerminal=false;
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case QUANTIFIER_ANY:
      case QUANTIFIER_ONEORMORE:
      case QUANTIFIER_ZEROORONE:
      case QUANTIFIER_NRFIXED:
      case QUANTIFIER_NRTOUNBOUND:
      case QUANTIFIER_NRTONR:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case QUANTIFIER_ANY:
          jj_consume_token(QUANTIFIER_ANY);
                      jjtn000.upperBound=Integer.MAX_VALUE;jjtn000.lowerBound=0;
          break;
        case QUANTIFIER_ONEORMORE:
          jj_consume_token(QUANTIFIER_ONEORMORE);
                                 jjtn000.upperBound=Integer.MAX_VALUE;jjtn000.lowerBound=1;
          break;
        case QUANTIFIER_ZEROORONE:
          jj_consume_token(QUANTIFIER_ZEROORONE);
                                 jjtn000.upperBound=1;jjtn000.lowerBound=0;
          break;
        case QUANTIFIER_NRFIXED:
          t = jj_consume_token(QUANTIFIER_NRFIXED);
                s=t.image;
                s=s.replace("{","");
                s=s.replace("}","");
          jjtn000.upperBound=Integer.parseInt(s);jjtn000.lowerBound=Integer.parseInt(s);
          break;
        case QUANTIFIER_NRTOUNBOUND:
          t = jj_consume_token(QUANTIFIER_NRTOUNBOUND);
                s=t.image;
                s=s.replace("{","");
                s=s.replace("{","");
                s=s.replace(",","");
          jjtn000.upperBound=Integer.MAX_VALUE;jjtn000.lowerBound=Integer.parseInt(s);
          break;
        case QUANTIFIER_NRTONR:
          t = jj_consume_token(QUANTIFIER_NRTONR);
                s=t.image;
                s=s.replace("{","");
                s=s.replace("}","");
                String[] split =s.split(",");
          jjtn000.upperBound=Integer.parseInt(split[1]);jjtn000.lowerBound=Integer.parseInt(split[0]);
          break;
        default:
          jj_la1[6] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[7] = jj_gen;
        ;
      }
   jjtree.closeNodeScope(jjtn000, true);
   jjtc000 = false;
  System.out.print("{"+jjtn000.lowerBound+","+jjtn000.upperBound+"}");
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public EG2TokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[8];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x10000,0x10000,0x4000,0x5020,0x5020,0x1020,0xfc0,0xfc0,};
   }

  /** Constructor with InputStream. */
  public EG2(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public EG2(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new EG2TokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public EG2(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new EG2TokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public EG2(EG2TokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(EG2TokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[17];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 8; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 17; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}

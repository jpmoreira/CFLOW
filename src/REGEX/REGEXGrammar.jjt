/**
 * JJTree template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */options{  JDK_VERSION = "1.5";  static = true;
  MULTI = true;}PARSER_BEGIN(EG2)package REGEX;

public class EG2{  public static void main(String args [])  {

    try    {
      EG2 obj=new EG2(System.in);    	SimpleNode s=obj.Regex();
    	s.dump("");
    }    catch(ParseException e)    {    }
  }}PARSER_END(EG2)SKIP :{ " " | "\r" | "\t"}TOKEN : /* IDENTIFIERS */{

	< INTEGER : (["0" - "9"])+ > |
  		< ID : "\""["A"- "Z","a"-"z"](["0"-"9","a"-"z","A"-"Z"])*"\"" > |

	< QUANTIFIER_ANY : "*" >|

	< QUANTIFIER_ONEORMORE : "+" >|

	< QUANTIFIER_ZEROORONE : "?" >|

	< QUANTIFIER_NRFIXED : "{"< INTEGER >"}" >|

	< QUANTIFIER_NRTOUNBOUND : "{"< INTEGER >",""}" >|

	< QUANTIFIER_NRTONR : "{"< INTEGER >","< INTEGER >"}" >|//lookahead de 3 necessario para distinguir este do de cima

	< LP: "(" >|

	< RP: ")" >|

	< DOT: ".">|
	
	< LF: "\n" >


	
	
}SimpleNode Regex() #Regex:{}{
  Expression()< LF >

 
  {  return jjtThis;}}


void ID_Node():{Token t;}
{	token=< ID >	{
	  jjtThis.identifier=token.image.replace("\"","");	}	
}

void Expression()#void:{int nrChilds=1;}{
       Group()(("|"Group(){nrChilds++;} )+#OR(nrChilds))?}

void Group()#void:{int nrChilds=1;}{	Terminal()(((<DOT>)?Terminal(){nrChilds++;})+#CONCAT(nrChilds))?
}

void Terminal():{Token t;String s;String id;Token idToken;}{


  {jjtThis.upperBound=1;jjtThis.lowerBound=1;}
(   ( (idToken=< ID >)   {jjtThis.isTrueTerminal=true;id=idToken.image;id=id.replace("\"","");jjtThis.idString=id;}|(< LP > Expression() < RP >)   {jjtThis.isTrueTerminal=false;})
 (
   < QUANTIFIER_ANY >{jjtThis.upperBound=Integer.MAX_VALUE;jjtThis.lowerBound=0;}|

	< QUANTIFIER_ONEORMORE >{jjtThis.upperBound=Integer.MAX_VALUE;jjtThis.lowerBound=1;}|

	< QUANTIFIER_ZEROORONE >{jjtThis.upperBound=1;jjtThis.lowerBound=0;}|

	t=< QUANTIFIER_NRFIXED >{
		s=t.image;
		s=s.replace("{","");
		s=s.replace("}","");
	  jjtThis.upperBound=Integer.parseInt(s);jjtThis.lowerBound=Integer.parseInt(s);}|

	t=< QUANTIFIER_NRTOUNBOUND >{
		s=t.image;
		s=s.replace("{","");
		s=s.replace("{","");
		s=s.replace(",","");
	  jjtThis.upperBound=Integer.MAX_VALUE;jjtThis.lowerBound=Integer.parseInt(s);}|

	t=< QUANTIFIER_NRTONR >{
		s=t.image;
		s=s.replace("{","");
		s=s.replace("}","");
		String[] split =s.split(",");
	  jjtThis.upperBound=Integer.parseInt(split[1]);jjtThis.lowerBound=Integer.parseInt(split[0]);}	

   )?

 ) {System.out.print("{"+jjtThis.lowerBound+","+jjtThis.upperBound+"}");}
 }


/*
void Terminal() #void:{SimpleNode quantified;SimpleNode quantifier;}{

	(
		((quantified=ID_Node()|"("quantified=Expression()")")quantifier=Quantifier()#Quantifier(1))
			| 
		(quantified=ID_Node()#ID(0)|"("quantified=Expression()")")	
	)

	
	{		if(quantifier!=null)//return quantifier;
		else return quantified;
	}

	
  }
*/
/*
void Quantifier() :{Token quant;String str;}{
	(	  < QUANTIFIER_ANY >	{		jjtThis.lowerBound=0;
		jjtThis.upperBound=Integer.MAX_VALUE;

	}|
	< QUANTIFIER_ONEORMORE >	{		jjtThis.lowerBound=1;
		jjtThis.upperBound=Integer.MAX_VALUE;

	}|
	< QUANTIFIER_ZEROORONE >	{		jjtThis.lowerBound=0;
		jjtThis.upperBound=1;
	}|
	quant=< QUANTIFIER_NRFIXED  >	{
	  	str=quant.image;
	  	str=str.replaceAll("{","");
	  	str=str.replaceAll("}","");		jjtThis.lowerBound=Integer.parseInt(str);
		jjtThis.upperBound=Integer.parseInt(str);

	}|
	quant=< QUANTIFIER_NRTOUNBOUND >	{		str=quant.image;
	  	str=str.replaceAll("{","");
	  	str=str.replaceAll("}","");
		jjtThis.lowerBound=Integer.parseInt(str);
		jjtThis.upperBound=Integer.MAX_VALUE;
	}|
	quant=< QUANTIFIER_NRTONR >	{		str=quant.image;
	  	str=str.replaceAll("{","");
	  	str=str.replaceAll("}","");
	  	String [] nrs=str.split(",");
		jjtThis.lowerBound=Integer.parseInt(nrs[0]);
		jjtThis.upperBound=Integer.parseInt(nrs[1]);

	})

	{		//return jjtThis;
	}
	

}
*/
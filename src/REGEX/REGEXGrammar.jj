/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. REGEXGrammar.jj */
/*@egen*//**
 * JJTree template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */options{  JDK_VERSION = "1.5";  static = true;
               }PARSER_BEGIN(EG2)package REGEX;

public class EG2/*@bgen(jjtree)*/implements EG2TreeConstants/*@egen*/{/*@bgen(jjtree)*/
  protected static JJTEG2State jjtree = new JJTEG2State();

/*@egen*/  public static void main(String args [])  {      }}PARSER_END(EG2)SKIP :{  " "| "\t"| "\n"| "\r"| < "//" (~[ "\n", "\r" ])*    (      "\n"    | "\r"    | "\r\n"    ) >| < "/*" (~[ "*" ])* "*"    (      ~[ "/" ] (~[ "*" ])* "*"    )*    "/" >}TOKEN : /* IDENTIFIERS */{

	< INTEGER : (["0" - "9"])+ > |
  		< ID : "\""["A"- "Z"](["0"-"9","a"-"z","A"-"Z"])* "\""> |

	< QUANTIFIER_ANY : "*" >|

	< QUANTIFIER_ONEORMORE : "+" >|

	< QUANTIFIER_ZEROORONE : "?" >|

	< QUANTIFIER_NRFIXED : "{"< INTEGER >"}" >|

	< QUANTIFIER_NRTOUNBOUND : "{"< INTEGER >",""}" >|

	< QUANTIFIER_NRTONR : "{"< INTEGER >","< INTEGER >"}" >//lookahead de 3 necessario para distinguir este do de cima

	
}SimpleNode Regex()       :{/*@bgen(jjtree) Regex */
  ASTRegex jjtn000 = new ASTRegex(JJTREGEX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Regex */
  try {
/*@egen*/
  Quantifier(null)/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}


SimpleNode Quantifier(SimpleNode objectQuantified) :{/*@bgen(jjtree) Quantifier */
                                                     ASTQuantifier jjtn000 = new ASTQuantifier(JJTQUANTIFIER);
                                                     boolean jjtc000 = true;
                                                     jjtree.openNodeScope(jjtn000);
/*@egen*/Token quant;String str;}{/*@bgen(jjtree) Quantifier */
        try {
/*@egen*/
	(	  < QUANTIFIER_ANY >	{		jjtn000.lowerBound=0;
		jjtn000.upperBound=Integer.MAX_VALUE;

	}|
	< QUANTIFIER_ONEORMORE >	{		jjtn000.lowerBound=1;
		jjtn000.upperBound=Integer.MAX_VALUE;

	}|
	< QUANTIFIER_ZEROORONE >	{		jjtn000.lowerBound=0;
		jjtn000.upperBound=1;
	}|
	quant=< QUANTIFIER_NRFIXED  >	{
	  	str=quant.image;
	  	str=str.replaceAll("{","");
	  	str=str.replaceAll("}","");		jjtn000.lowerBound=Integer.parseInt(str);
		jjtn000.upperBound=Integer.parseInt(str);

	}|
	quant=< QUANTIFIER_NRTOUNBOUND >	{		str=quant.image;
	  	str=str.replaceAll("{","");
	  	str=str.replaceAll("}","");
		jjtn000.lowerBound=Integer.parseInt(str);
		jjtn000.upperBound=Integer.MAX_VALUE;
	}|
	quant=< QUANTIFIER_NRTONR >	{		str=quant.image;
	  	str=str.replaceAll("{","");
	  	str=str.replaceAll("}","");
	  	String [] nrs=str.split(",");
		jjtn000.lowerBound=Integer.parseInt(nrs[0]);
		jjtn000.upperBound=Integer.parseInt(nrs[1]);

	})/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/

	{
	  	jjtn000.quantified=objectQuantified;		return jjtn000;
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
	

}
